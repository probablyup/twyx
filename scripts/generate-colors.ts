import fs from "fs";
import path from "path";
import * as allColors from "tailwindcss/colors";
import theme from "tailwindcss/defaultTheme";

const ignored = ["lightBlue", "warmGray", "trueGray", "coolGray", "blueGray"];
const skip_steps = ["inherit", "current", "default", "transparent"];

const colors = Object.keys(allColors).filter((x) => !ignored.includes(x)) as (keyof typeof allColors)[];
const opacities = Object.keys(theme.opacity);

let base = "";
let variants = "";

colors.forEach((color) => {
  const steps = typeof allColors[color] === "string" ? [] : Object.keys(allColors[color]);

  if (steps.length === 0) {
    base += `| '${color}'\n`;

    if (!skip_steps.includes(color)) {
      opacities.forEach((opacity) => {
        variants += `| '${color}-${opacity}'\n`;
      });
    }
  }

  if (!skip_steps.includes(color)) {
    const steps = typeof allColors[color] === "string" ? [] : Object.keys(allColors[color]);

    steps.forEach((step) => {
      base += `| '${color}-${step}'\n`;

      opacities.forEach((opacity) => {
        variants += `| '${color}-${step}-${opacity}'\n`;
      });
    });
  }
});

const content = `
// I am generated by scripts/generate-colors.ts
export type BaseColors = ${base.trim()};

export type BaseColorTransparencies = ${variants.trim()};
`.trimStart();

fs.writeFileSync(path.join(import.meta.dir, "../generated.ts"), content, "utf-8");
